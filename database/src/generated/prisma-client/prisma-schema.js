module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateApplication {
  count: Int!
}

type AggregateSponsorData {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Application {
  id: ID!
  createdAt: DateTime!
  complete: Boolean!
  studentId: String
  dateOfBirth: String
  phoneNumber: String
  gender: String
  race: String
  languages: [String!]!
  dietaryRestrictions: [String!]!
  specialAccommodations: [String!]!
  shirtSize: String
  needTravel: Boolean
  emailOptIn: Boolean
  acceptCodeOfConduct: Boolean
  sponsorData: SponsorData
  sendToSponsors: Boolean
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreatedietaryRestrictionsInput {
  set: [String!]
}

input ApplicationCreateInput {
  id: ID
  complete: Boolean
  studentId: String
  dateOfBirth: String
  phoneNumber: String
  gender: String
  race: String
  languages: ApplicationCreatelanguagesInput
  dietaryRestrictions: ApplicationCreatedietaryRestrictionsInput
  specialAccommodations: ApplicationCreatespecialAccommodationsInput
  shirtSize: String
  needTravel: Boolean
  emailOptIn: Boolean
  acceptCodeOfConduct: Boolean
  sponsorData: SponsorDataCreateOneInput
  sendToSponsors: Boolean
}

input ApplicationCreatelanguagesInput {
  set: [String!]
}

input ApplicationCreateOneInput {
  create: ApplicationCreateInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationCreatespecialAccommodationsInput {
  set: [String!]
}

type ApplicationEdge {
  node: Application!
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  complete_ASC
  complete_DESC
  studentId_ASC
  studentId_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  gender_ASC
  gender_DESC
  race_ASC
  race_DESC
  shirtSize_ASC
  shirtSize_DESC
  needTravel_ASC
  needTravel_DESC
  emailOptIn_ASC
  emailOptIn_DESC
  acceptCodeOfConduct_ASC
  acceptCodeOfConduct_DESC
  sendToSponsors_ASC
  sendToSponsors_DESC
}

type ApplicationPreviousValues {
  id: ID!
  createdAt: DateTime!
  complete: Boolean!
  studentId: String
  dateOfBirth: String
  phoneNumber: String
  gender: String
  race: String
  languages: [String!]!
  dietaryRestrictions: [String!]!
  specialAccommodations: [String!]!
  shirtSize: String
  needTravel: Boolean
  emailOptIn: Boolean
  acceptCodeOfConduct: Boolean
  sendToSponsors: Boolean
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
  AND: [ApplicationSubscriptionWhereInput!]
  OR: [ApplicationSubscriptionWhereInput!]
  NOT: [ApplicationSubscriptionWhereInput!]
}

input ApplicationUpdateDataInput {
  complete: Boolean
  studentId: String
  dateOfBirth: String
  phoneNumber: String
  gender: String
  race: String
  languages: ApplicationUpdatelanguagesInput
  dietaryRestrictions: ApplicationUpdatedietaryRestrictionsInput
  specialAccommodations: ApplicationUpdatespecialAccommodationsInput
  shirtSize: String
  needTravel: Boolean
  emailOptIn: Boolean
  acceptCodeOfConduct: Boolean
  sponsorData: SponsorDataUpdateOneInput
  sendToSponsors: Boolean
}

input ApplicationUpdatedietaryRestrictionsInput {
  set: [String!]
}

input ApplicationUpdateInput {
  complete: Boolean
  studentId: String
  dateOfBirth: String
  phoneNumber: String
  gender: String
  race: String
  languages: ApplicationUpdatelanguagesInput
  dietaryRestrictions: ApplicationUpdatedietaryRestrictionsInput
  specialAccommodations: ApplicationUpdatespecialAccommodationsInput
  shirtSize: String
  needTravel: Boolean
  emailOptIn: Boolean
  acceptCodeOfConduct: Boolean
  sponsorData: SponsorDataUpdateOneInput
  sendToSponsors: Boolean
}

input ApplicationUpdatelanguagesInput {
  set: [String!]
}

input ApplicationUpdateManyMutationInput {
  complete: Boolean
  studentId: String
  dateOfBirth: String
  phoneNumber: String
  gender: String
  race: String
  languages: ApplicationUpdatelanguagesInput
  dietaryRestrictions: ApplicationUpdatedietaryRestrictionsInput
  specialAccommodations: ApplicationUpdatespecialAccommodationsInput
  shirtSize: String
  needTravel: Boolean
  emailOptIn: Boolean
  acceptCodeOfConduct: Boolean
  sendToSponsors: Boolean
}

input ApplicationUpdateOneInput {
  create: ApplicationCreateInput
  update: ApplicationUpdateDataInput
  upsert: ApplicationUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ApplicationWhereUniqueInput
}

input ApplicationUpdatespecialAccommodationsInput {
  set: [String!]
}

input ApplicationUpsertNestedInput {
  update: ApplicationUpdateDataInput!
  create: ApplicationCreateInput!
}

input ApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  complete: Boolean
  complete_not: Boolean
  studentId: String
  studentId_not: String
  studentId_in: [String!]
  studentId_not_in: [String!]
  studentId_lt: String
  studentId_lte: String
  studentId_gt: String
  studentId_gte: String
  studentId_contains: String
  studentId_not_contains: String
  studentId_starts_with: String
  studentId_not_starts_with: String
  studentId_ends_with: String
  studentId_not_ends_with: String
  dateOfBirth: String
  dateOfBirth_not: String
  dateOfBirth_in: [String!]
  dateOfBirth_not_in: [String!]
  dateOfBirth_lt: String
  dateOfBirth_lte: String
  dateOfBirth_gt: String
  dateOfBirth_gte: String
  dateOfBirth_contains: String
  dateOfBirth_not_contains: String
  dateOfBirth_starts_with: String
  dateOfBirth_not_starts_with: String
  dateOfBirth_ends_with: String
  dateOfBirth_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  race: String
  race_not: String
  race_in: [String!]
  race_not_in: [String!]
  race_lt: String
  race_lte: String
  race_gt: String
  race_gte: String
  race_contains: String
  race_not_contains: String
  race_starts_with: String
  race_not_starts_with: String
  race_ends_with: String
  race_not_ends_with: String
  shirtSize: String
  shirtSize_not: String
  shirtSize_in: [String!]
  shirtSize_not_in: [String!]
  shirtSize_lt: String
  shirtSize_lte: String
  shirtSize_gt: String
  shirtSize_gte: String
  shirtSize_contains: String
  shirtSize_not_contains: String
  shirtSize_starts_with: String
  shirtSize_not_starts_with: String
  shirtSize_ends_with: String
  shirtSize_not_ends_with: String
  needTravel: Boolean
  needTravel_not: Boolean
  emailOptIn: Boolean
  emailOptIn_not: Boolean
  acceptCodeOfConduct: Boolean
  acceptCodeOfConduct_not: Boolean
  sponsorData: SponsorDataWhereInput
  sendToSponsors: Boolean
  sendToSponsors_not: Boolean
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateManyApplications(data: ApplicationUpdateManyMutationInput!, where: ApplicationWhereInput): BatchPayload!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  createSponsorData(data: SponsorDataCreateInput!): SponsorData!
  updateSponsorData(data: SponsorDataUpdateInput!, where: SponsorDataWhereUniqueInput!): SponsorData
  updateManySponsorDatas(data: SponsorDataUpdateManyMutationInput!, where: SponsorDataWhereInput): BatchPayload!
  upsertSponsorData(where: SponsorDataWhereUniqueInput!, create: SponsorDataCreateInput!, update: SponsorDataUpdateInput!): SponsorData!
  deleteSponsorData(where: SponsorDataWhereUniqueInput!): SponsorData
  deleteManySponsorDatas(where: SponsorDataWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  sponsorData(where: SponsorDataWhereUniqueInput!): SponsorData
  sponsorDatas(where: SponsorDataWhereInput, orderBy: SponsorDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SponsorData]!
  sponsorDatasConnection(where: SponsorDataWhereInput, orderBy: SponsorDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SponsorDataConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum ROLE {
  ADMIN
  SPONSOR
  PARTICIPANT
}

type SponsorData {
  id: ID!
  major: String
  educationLevel: String
  school: String
  interests: [String!]!
  experience: Int
  hackathonAwards: [String!]!
  skills: [String!]!
  gpa: Float
  aboutYou: String
  biggestChallenge: String
  resume: String
}

type SponsorDataConnection {
  pageInfo: PageInfo!
  edges: [SponsorDataEdge]!
  aggregate: AggregateSponsorData!
}

input SponsorDataCreatehackathonAwardsInput {
  set: [String!]
}

input SponsorDataCreateInput {
  id: ID
  major: String
  educationLevel: String
  school: String
  interests: SponsorDataCreateinterestsInput
  experience: Int
  hackathonAwards: SponsorDataCreatehackathonAwardsInput
  skills: SponsorDataCreateskillsInput
  gpa: Float
  aboutYou: String
  biggestChallenge: String
  resume: String
}

input SponsorDataCreateinterestsInput {
  set: [String!]
}

input SponsorDataCreateOneInput {
  create: SponsorDataCreateInput
  connect: SponsorDataWhereUniqueInput
}

input SponsorDataCreateskillsInput {
  set: [String!]
}

type SponsorDataEdge {
  node: SponsorData!
  cursor: String!
}

enum SponsorDataOrderByInput {
  id_ASC
  id_DESC
  major_ASC
  major_DESC
  educationLevel_ASC
  educationLevel_DESC
  school_ASC
  school_DESC
  experience_ASC
  experience_DESC
  gpa_ASC
  gpa_DESC
  aboutYou_ASC
  aboutYou_DESC
  biggestChallenge_ASC
  biggestChallenge_DESC
  resume_ASC
  resume_DESC
}

type SponsorDataPreviousValues {
  id: ID!
  major: String
  educationLevel: String
  school: String
  interests: [String!]!
  experience: Int
  hackathonAwards: [String!]!
  skills: [String!]!
  gpa: Float
  aboutYou: String
  biggestChallenge: String
  resume: String
}

type SponsorDataSubscriptionPayload {
  mutation: MutationType!
  node: SponsorData
  updatedFields: [String!]
  previousValues: SponsorDataPreviousValues
}

input SponsorDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SponsorDataWhereInput
  AND: [SponsorDataSubscriptionWhereInput!]
  OR: [SponsorDataSubscriptionWhereInput!]
  NOT: [SponsorDataSubscriptionWhereInput!]
}

input SponsorDataUpdateDataInput {
  major: String
  educationLevel: String
  school: String
  interests: SponsorDataUpdateinterestsInput
  experience: Int
  hackathonAwards: SponsorDataUpdatehackathonAwardsInput
  skills: SponsorDataUpdateskillsInput
  gpa: Float
  aboutYou: String
  biggestChallenge: String
  resume: String
}

input SponsorDataUpdatehackathonAwardsInput {
  set: [String!]
}

input SponsorDataUpdateInput {
  major: String
  educationLevel: String
  school: String
  interests: SponsorDataUpdateinterestsInput
  experience: Int
  hackathonAwards: SponsorDataUpdatehackathonAwardsInput
  skills: SponsorDataUpdateskillsInput
  gpa: Float
  aboutYou: String
  biggestChallenge: String
  resume: String
}

input SponsorDataUpdateinterestsInput {
  set: [String!]
}

input SponsorDataUpdateManyMutationInput {
  major: String
  educationLevel: String
  school: String
  interests: SponsorDataUpdateinterestsInput
  experience: Int
  hackathonAwards: SponsorDataUpdatehackathonAwardsInput
  skills: SponsorDataUpdateskillsInput
  gpa: Float
  aboutYou: String
  biggestChallenge: String
  resume: String
}

input SponsorDataUpdateOneInput {
  create: SponsorDataCreateInput
  update: SponsorDataUpdateDataInput
  upsert: SponsorDataUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SponsorDataWhereUniqueInput
}

input SponsorDataUpdateskillsInput {
  set: [String!]
}

input SponsorDataUpsertNestedInput {
  update: SponsorDataUpdateDataInput!
  create: SponsorDataCreateInput!
}

input SponsorDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  major: String
  major_not: String
  major_in: [String!]
  major_not_in: [String!]
  major_lt: String
  major_lte: String
  major_gt: String
  major_gte: String
  major_contains: String
  major_not_contains: String
  major_starts_with: String
  major_not_starts_with: String
  major_ends_with: String
  major_not_ends_with: String
  educationLevel: String
  educationLevel_not: String
  educationLevel_in: [String!]
  educationLevel_not_in: [String!]
  educationLevel_lt: String
  educationLevel_lte: String
  educationLevel_gt: String
  educationLevel_gte: String
  educationLevel_contains: String
  educationLevel_not_contains: String
  educationLevel_starts_with: String
  educationLevel_not_starts_with: String
  educationLevel_ends_with: String
  educationLevel_not_ends_with: String
  school: String
  school_not: String
  school_in: [String!]
  school_not_in: [String!]
  school_lt: String
  school_lte: String
  school_gt: String
  school_gte: String
  school_contains: String
  school_not_contains: String
  school_starts_with: String
  school_not_starts_with: String
  school_ends_with: String
  school_not_ends_with: String
  experience: Int
  experience_not: Int
  experience_in: [Int!]
  experience_not_in: [Int!]
  experience_lt: Int
  experience_lte: Int
  experience_gt: Int
  experience_gte: Int
  gpa: Float
  gpa_not: Float
  gpa_in: [Float!]
  gpa_not_in: [Float!]
  gpa_lt: Float
  gpa_lte: Float
  gpa_gt: Float
  gpa_gte: Float
  aboutYou: String
  aboutYou_not: String
  aboutYou_in: [String!]
  aboutYou_not_in: [String!]
  aboutYou_lt: String
  aboutYou_lte: String
  aboutYou_gt: String
  aboutYou_gte: String
  aboutYou_contains: String
  aboutYou_not_contains: String
  aboutYou_starts_with: String
  aboutYou_not_starts_with: String
  aboutYou_ends_with: String
  aboutYou_not_ends_with: String
  biggestChallenge: String
  biggestChallenge_not: String
  biggestChallenge_in: [String!]
  biggestChallenge_not_in: [String!]
  biggestChallenge_lt: String
  biggestChallenge_lte: String
  biggestChallenge_gt: String
  biggestChallenge_gte: String
  biggestChallenge_contains: String
  biggestChallenge_not_contains: String
  biggestChallenge_starts_with: String
  biggestChallenge_not_starts_with: String
  biggestChallenge_ends_with: String
  biggestChallenge_not_ends_with: String
  resume: String
  resume_not: String
  resume_in: [String!]
  resume_not_in: [String!]
  resume_lt: String
  resume_lte: String
  resume_gt: String
  resume_gte: String
  resume_contains: String
  resume_not_contains: String
  resume_starts_with: String
  resume_not_starts_with: String
  resume_ends_with: String
  resume_not_ends_with: String
  AND: [SponsorDataWhereInput!]
  OR: [SponsorDataWhereInput!]
  NOT: [SponsorDataWhereInput!]
}

input SponsorDataWhereUniqueInput {
  id: ID
}

type Subscription {
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  sponsorData(where: SponsorDataSubscriptionWhereInput): SponsorDataSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  firstName: String
  lastName: String
  application: Application
  emailVerified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: ROLE!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  firstName: String
  lastName: String
  application: ApplicationCreateOneInput
  emailVerified: Boolean
  role: ROLE
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  emailVerified_ASC
  emailVerified_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  firstName: String
  lastName: String
  emailVerified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: ROLE!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  application: ApplicationUpdateOneInput
  emailVerified: Boolean
  role: ROLE
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  firstName: String
  lastName: String
  emailVerified: Boolean
  role: ROLE
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  application: ApplicationWhereInput
  emailVerified: Boolean
  emailVerified_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  role: ROLE
  role_not: ROLE
  role_in: [ROLE!]
  role_not_in: [ROLE!]
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    